{
	"info": {
		"_postman_id": "dfad9685-37d7-47a5-9bbe-e7f3694cb29d",
		"name": "meetup event-teams",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19574588"
	},
	"item": [
		{
			"name": "teams",
			"item": [
				{
					"name": "Adding team member",
					"item": [
						{
							"name": "Adding a new valid team member",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const userid = 1;\r",
											"        pm.collectionVariables.set('userid', userid);\r",
											"\r",
											"        pm.request.headers.add({\r",
											"            key: 'X-User-Id',\r",
											"            value: userid\r",
											"        });\r",
											"        const event = await api.addEvent(rnd.getEvent());\r",
											"        teamMember = {\r",
											"            eventId: event.id,\r",
											"            userId: 2,\r",
											"            role: \"MANAGER\"\r",
											"        };\r",
											"    } catch(err) {\r",
											"        console.error(\"Error in test data preparation.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(teamMember),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should contain status code 201 and data in json format\", function () {\r",
											"    pm.response.to.have.status(201);  \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.request.body.raw);\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"The response must contain the following fields: eventId, userId, role\", function () {\r",
											"pm.expect(target).to.have.property('eventId');\r",
											"pm.expect(target).to.have.property('userId');\r",
											"pm.expect(target).to.have.property('role');\r",
											"});\r",
											"\r",
											"pm.test(\"The data in the response must match the data in the request\", function () {\r",
											"    pm.expect(target.eventId).equal(source.eventId, 'eventId must match eventId in the request');\r",
											"    pm.expect(target.userId).equal(source.userId, 'userId must match userId in the request');\r",
											"    pm.expect(target.role).equal(source.role, 'role must match role in the request');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams"
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Adding a new team member with invalid role",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const userid = 1;\r",
											"        pm.collectionVariables.set('userid', userid);\r",
											"\r",
											"        pm.request.headers.add({\r",
											"            key: 'X-User-Id',\r",
											"            value: userid\r",
											"        });\r",
											"        const event = await api.addEvent(rnd.getEvent());\r",
											"        teamMember = {\r",
											"            eventId: event.id,\r",
											"            userId: 2,\r",
											"            role: \"VENDOR\"\r",
											"        };\r",
											"    } catch(err) {\r",
											"        console.error(\"Error in test data preparation.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(teamMember),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should contain status code 500 and data in json format\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams"
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Adding a new team member with invalid owner",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const userid = 1;\r",
											"        pm.collectionVariables.set('userid', userid);\r",
											"\r",
											"        pm.request.headers.upsert({\r",
											"            key: 'X-User-Id',\r",
											"            value: userid\r",
											"        });\r",
											"        const event = await api.addEvent(rnd.getEvent());\r",
											"        pm.request.headers.upsert({\r",
											"            key: 'X-User-Id',\r",
											"            value: 2\r",
											"        });\r",
											"        teamMember = {\r",
											"            eventId: event.id,\r",
											"            userId: 200,\r",
											"            role: \"MANAGER\"\r",
											"        };\r",
											"    } catch(err) {\r",
											"        console.error(\"Error in test data preparation.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(teamMember),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should contain status code 404 and data in json format\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams"
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Adding a new team member with non-existent event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const userid = 1;\r",
											"        pm.collectionVariables.set('userid', userid);\r",
											"\r",
											"        pm.request.headers.add({\r",
											"            key: 'X-User-Id',\r",
											"            value: userid\r",
											"        });\r",
											"        const event = await api.addEvent(rnd.getEvent());\r",
											"        teamMember = {\r",
											"            eventId: -1,\r",
											"            userId: 2,\r",
											"            role: \"MANAGER\"\r",
											"        };\r",
											"    } catch(err) {\r",
											"        console.error(\"Error in test data preparation.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(teamMember),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should contain status code 404 and data in json format\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams"
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						}
					]
				},
				{
					"name": "Getting team",
					"item": [
						{
							"name": "Getting team by event ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const userid = 1;\r",
											"        pm.collectionVariables.set('userid', userid);\r",
											"\r",
											"        pm.request.headers.add({\r",
											"            key: 'X-User-Id',\r",
											"            value: userid\r",
											"        });\r",
											"        const event = await api.addEvent(rnd.getEvent());\r",
											"        teamMember = {\r",
											"            eventId: event.id,\r",
											"            userId: 2,\r",
											"            role: \"MANAGER\"\r",
											"        };\r",
											"        await api.addTeamMember(teamMember);\r",
											"        teamMember2 = {\r",
											"            eventId: event.id,\r",
											"            userId: 3,\r",
											"            role: \"MEMBER\"\r",
											"        };\r",
											"        await api.addTeamMember(teamMember2);\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error in test data preparation.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should contain status code 200 and data in json format\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"The response must contain the following fields: id, name, email, password, aboutMe\", function () {\r",
											"        pm.expect(target[0]).to.have.property('eventId');\r",
											"        pm.expect(target[0]).to.have.property('userId');\r",
											"        pm.expect(target[0]).to.have.property('role');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams/{{eventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams",
										"{{eventId}}"
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Getting empty team by event ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const userid = 1;\r",
											"        pm.collectionVariables.set('userid', userid);\r",
											"\r",
											"        pm.request.headers.add({\r",
											"            key: 'X-User-Id',\r",
											"            value: userid\r",
											"        });\r",
											"        const event = await api.addEvent(rnd.getEvent());\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error in test data preparation.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should contain status code 200 and data in json format\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams/{{eventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams",
										"{{eventId}}"
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Getting team by invalid event ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const userid = 1;\r",
											"        pm.collectionVariables.set('userid', userid);\r",
											"\r",
											"        pm.request.headers.add({\r",
											"            key: 'X-User-Id',\r",
											"            value: userid\r",
											"        });\r",
											"        const event = await api.addEvent(rnd.getEvent());\r",
											"        teamMember = {\r",
											"            eventId: event.id,\r",
											"            userId: 2,\r",
											"            role: \"MANAGER\"\r",
											"        };\r",
											"        await api.addTeamMember(teamMember);\r",
											"        teamMember2 = {\r",
											"            eventId: event.id,\r",
											"            userId: 3,\r",
											"            role: \"MEMBER\"\r",
											"        };\r",
											"        await api.addTeamMember(teamMember2);\r",
											"        pm.collectionVariables.set('eventId', -1);\r",
											"    } catch(err) {\r",
											"        console.error(\"Error in test data preparation.\", err);\r",
											"    }\r",
											"\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should contain status code 404 and data in json format\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams/{{eventId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams",
										"{{eventId}}"
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						}
					]
				},
				{
					"name": "Updating team member",
					"item": [
						{
							"name": "Update user role from MANAGER to MEMBER by event owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should contain status code 200 and data in JSON format\", function () {",
											"    pm.response.to.have.status(200);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											"",
											"const source = JSON.parse(pm.collectionVariables.get('response'));",
											"const target = pm.response.json();",
											"",
											"pm.test(\"The response must contain the following fields: eventId, userId, role\", function () {",
											"    pm.expect(target).to.have.property('eventId');",
											"    pm.expect(target).to.have.property('userId');",
											"    pm.expect(target).to.have.property('role');",
											"});",
											"",
											"pm.test(\"The data in the response must match the data in the request\", function () {",
											"    pm.expect(target.eventId).to.equal(source.eventId, 'eventId must match eventId in the request');",
											"    pm.expect(target.userId).to.equal(source.userId, 'userId must match userId in the request');",
											"    pm.expect(target.role).to.equal('MEMBER', 'role must match role in the request');",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {",
											"    const api = new API(pm);",
											"    const rnd = new RandomUtils();",
											"",
											"    try {",
											"        const userid = 1;",
											"        const memberId = 2;",
											"        let teamMember;",
											"        let event;",
											"",
											"        pm.collectionVariables.set('userid', memberId);",
											"",
											"        pm.request.headers.add({",
											"            key: 'X-User-Id',",
											"            value: userid",
											"        });",
											"        event = await api.addEvent(rnd.getEvent());",
											"        teamMember = {",
											"            eventId: event.id,",
											"            userId: memberId,",
											"            role: \"MANAGER\"",
											"        };",
											"        await api.addTeamMember(teamMember);",
											"        pm.collectionVariables.set('eventId', event.id);",
											"        pm.collectionVariables.set(\"response\", JSON.stringify(teamMember));",
											"        ",
											"    } catch(err) {",
											"        console.error(\"Error in test data preparation.\", err);",
											"    }",
											"",
											"    pm.request.body.update({",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            role : 'MEMBER'",
											"        }),",
											"        options: { raw: { language: 'json' } }",
											"    });",
											"};",
											"",
											"const interval = setInterval(() => {}, 1000);",
											"",
											"setTimeout(async () => {",
											"    try {",
											"        await main();",
											"    } catch (e) {",
											"        console.error(e);",
											"    } finally {",
											"        clearInterval(interval);",
											"    }",
											"}, 100);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams/{{eventId}}/{{userid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams",
										"{{eventId}}",
										"{{userid}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update user role from MEMBER to MANAGER by MEMBER",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response should contain status code 403 and data in JSON format\", function () {",
											"    pm.response.to.have.status(403);",
											"    pm.response.to.be.withBody;",
											"    pm.response.to.be.json;",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {",
											"    const api = new API(pm);",
											"    const rnd = new RandomUtils();",
											"",
											"    try {",
											"        const userid = 1;",
											"        const memberId = 2;",
											"        let teamMember;",
											"        let event;",
											"",
											"        pm.collectionVariables.set('userid', memberId);",
											"",
											"        pm.request.headers.upsert({",
											"            key: 'X-User-Id',",
											"            value: userid",
											"        });",
											"        event = await api.addEvent(rnd.getEvent());",
											"        teamMember = {",
											"            eventId: event.id,",
											"            userId: memberId,",
											"            role: \"MEMBER\"",
											"        };",
											"        await api.addTeamMember(teamMember);",
											"        pm.collectionVariables.set('eventId', event.id);",
											"        pm.collectionVariables.set(\"response\", JSON.stringify(teamMember));",
											"        pm.request.headers.upsert({",
											"            key: 'X-User-Id',",
											"            value: memberId",
											"        });",
											"        ",
											"    } catch(err) {",
											"        console.error(\"Error in test data preparation.\", err);",
											"    }",
											"",
											"    pm.request.body.update({",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            role : 'MANAGER'",
											"        }),",
											"        options: { raw: { language: 'json' } }",
											"    });",
											"};",
											"",
											"const interval = setInterval(() => {}, 1000);",
											"",
											"setTimeout(async () => {",
											"    try {",
											"        await main();",
											"    } catch (e) {",
											"        console.error(e);",
											"    } finally {",
											"        clearInterval(interval);",
											"    }",
											"}, 100);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams/{{eventId}}/{{userid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams",
										"{{eventId}}",
										"{{userid}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Deleting team member",
					"item": [
						{
							"name": "Deleting valid team member",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const userid = 1;\r",
											"        const memberId = 2;\r",
											"        let teamMember;\r",
											"\r",
											"        pm.collectionVariables.set('userid', memberId);\r",
											"\r",
											"        pm.request.headers.add({\r",
											"            key: 'X-User-Id',\r",
											"            value: userid\r",
											"        });\r",
											"        event = await api.addEvent(rnd.getEvent());\r",
											"        teamMember = {\r",
											"            eventId: event.id,\r",
											"            userId: memberId,\r",
											"            role: \"MANAGER\"\r",
											"        };\r",
											"        await api.addTeamMember(teamMember);\r",
											"\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"        const foundedTeam = await api.findTeam(event.id);\r",
											"        pm.collectionVariables.set(\"response\", JSON.stringify(foundedTeam));\r",
											"    } catch(err) {\r",
											"        console.error(\"Error in test data preparation.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response must contain status code 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.collectionVariables.get('response') || '[]');\r",
											"const userId = pm.collectionVariables.get('userid');\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const baseUrl = pm.collectionVariables.get('baseUrl');\r",
											"\r",
											"pm.test(\"The user must be found before the query can be executed\", function(){\r",
											"    pm.expect(source.length).to.eql(1);\r",
											"    pm.expect(source[0].userId).to.eql(userId);\r",
											"});\r",
											"\r",
											"const headers = [\r",
											"    { key: \"Content-Type\", value: \"application/json\" },\r",
											"    { key: \"X-User-Id\", value: userId || \"1\" }\r",
											"];\r",
											"\r",
											"let body\r",
											"const req = {\r",
											"                url: baseUrl+\"/events/teams/\" + eventId,\r",
											"                method: \"GET\",\r",
											"                body: body == null ? \"\" : JSON.stringify(body),\r",
											"                header: headers,\r",
											"            };\r",
											"pm.sendRequest(req, (error, response) => {\r",
											"    pm.test(\"The response should contain status code 200 and data in json format\", function () {\r",
											"        pm.expect(response.code).to.eql(200); \r",
											"        pm.expect(response.headers.get('Content-Type')).to.include('application/json'); \r",
											"\r",
											"        const responseBody = JSON.parse(response.text());\r",
											"        pm.expect(responseBody).to.be.an('array').that.is.empty;\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams/{{eventId}}/{{userid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams",
										"{{eventId}}",
										"{{userid}}"
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Deleting team member by user with role MEMBER",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const userid = 1;\r",
											"        const memberId = 2;\r",
											"        let teamMember;\r",
											"\r",
											"        pm.collectionVariables.set('userid', memberId);\r",
											"\r",
											"        pm.request.headers.upsert({\r",
											"            key: 'X-User-Id',\r",
											"            value: userid\r",
											"        });\r",
											"        event = await api.addEvent(rnd.getEvent());\r",
											"        teamMember = {\r",
											"            eventId: event.id,\r",
											"            userId: memberId,\r",
											"            role: \"MEMBER\"\r",
											"        };\r",
											"        await api.addTeamMember(teamMember);\r",
											"\r",
											"        pm.collectionVariables.set('eventId', event.id);\r",
											"        const foundedTeam = await api.findTeam(event.id);\r",
											"        pm.request.headers.upsert({\r",
											"            key: 'X-User-Id',\r",
											"            value: memberId\r",
											"        });\r",
											"        pm.collectionVariables.set(\"response\", JSON.stringify(foundedTeam));\r",
											"    } catch(err) {\r",
											"        console.error(\"Error in test data preparation.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response must contain status code 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"\r",
											"const source = JSON.parse(pm.collectionVariables.get('response') || '[]');\r",
											"const userId = pm.collectionVariables.get('userid');\r",
											"const eventId = pm.collectionVariables.get('eventId');\r",
											"const baseUrl = pm.collectionVariables.get('baseUrl');\r",
											"\r",
											"pm.test(\"The user must be found before the query can be executed\", function(){\r",
											"    pm.expect(source.length).to.eql(1);\r",
											"    pm.expect(source[0].userId).to.eql(userId);\r",
											"});\r",
											"\r",
											"const headers = [\r",
											"    { key: \"Content-Type\", value: \"application/json\" },\r",
											"    { key: \"X-User-Id\", value: userId || \"1\" }\r",
											"];\r",
											"\r",
											"let body\r",
											"const req = {\r",
											"                url: baseUrl+\"/events/teams/\" + eventId,\r",
											"                method: \"GET\",\r",
											"                body: body == null ? \"\" : JSON.stringify(body),\r",
											"                header: headers,\r",
											"            };\r",
											"pm.sendRequest(req, (error, response) => {\r",
											"    pm.test(\"The response should contain status code 200 and data in json format\", function () {\r",
											"        pm.expect(response.code).to.eql(200); \r",
											"        pm.expect(response.headers.get('Content-Type')).to.include('application/json'); \r",
											"\r",
											"        const responseBody = JSON.parse(response.text());\r",
											"        pm.expect(responseBody[0]).to.have.property('userId');\r",
											"        pm.expect(responseBody[0]).to.have.property('eventId');\r",
											"        pm.expect(responseBody[0]).to.have.property('role');\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams/{{eventId}}/{{userid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams",
										"{{eventId}}",
										"{{userid}}"
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						},
						{
							"name": "Deleting team member from non-exist event",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const userid = 1;\r",
											"        const memberId = 2;\r",
											"\r",
											"        pm.collectionVariables.set('userid', memberId);\r",
											"\r",
											"        pm.request.headers.upsert({\r",
											"            key: 'X-User-Id',\r",
											"            value: userid\r",
											"        });\r",
											"        pm.collectionVariables.set('eventId', -1);\r",
											"        \r",
											"    } catch(err) {\r",
											"        console.error(\"Error in test data preparation.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The response must contain status code 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/events/teams/{{eventId}}/{{userid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"events",
										"teams",
										"{{eventId}}",
										"{{userid}}"
									]
								},
								"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
							},
							"response": []
						}
					]
				},
				{
					"name": "Adding a new valid event",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let event;\r",
									"    try {\r",
									"        const userid = 1;\r",
									"        pm.collectionVariables.set('userid', userid);\r",
									"\r",
									"        pm.request.headers.add({\r",
									"            key: 'X-User-Id',\r",
									"            value: userid\r",
									"        });\r",
									"        event = rnd.getEvent();\r",
									"    } catch(err) {\r",
									"        console.error(\"Error in test data preparation.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(event),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"The response should contain status code 201 and data in json format\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"The response must contain the following fields: id, name, description, createdDateTime, startDateTime, endDateTime, location, ownerId\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('name');\r",
									"pm.expect(target).to.have.property('description');\r",
									"pm.expect(target).to.have.property('createdDateTime');\r",
									"pm.expect(target).to.have.property('startDateTime');\r",
									"pm.expect(target).to.have.property('endDateTime');\r",
									"pm.expect(target).to.have.property('location');\r",
									"pm.expect(target).to.have.property('ownerId');\r",
									"});\r",
									"\r",
									"pm.test(\"The data in the response must match the data in the request\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.name).equal(source.name, 'The name of the event must match the name of the event in the request');\r",
									"    pm.expect(target.description).equal(source.description, 'The description of the event must match the description of the event in the request');\r",
									"    pm.expect(target.createdDateTime).to.not.be.null;\r",
									"    pm.expect(target.startDateTime).equal(source.startDateTime, 'The start date of the event must match the start date of the event in the request');\r",
									"    pm.expect(target.endDateTime).equal(source.endDateTime, 'The end date of the event must match the end date of the event in the request');\r",
									"    pm.expect(target.location.toString()).equal(source.location, 'The location of the event must match the location of the event in the request');\r",
									"    pm.expect(target.ownerId).equal(pm.collectionVariables.get('userid'), 'The event owner must match the X-User-Id in the header.');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/events",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"events"
							]
						},
						"description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/users\", user, \"Error when adding a new user: \", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/users/' + userId, null, \"Error when searching for a user by id\", verbose);",
					"    }",
					"",
					"    async findTeam(eventId, verbose=null) {",
					"        return this.get('/events/teams/' + eventId, null, \"Error when searching for a team by event id\", verbose);",
					"    }",
					"",
					"    async addTeamMember(teamMember, verbose=null) {",
					"        return this.post(\"/events/teams\", teamMember, \"Error when adding a new team member: \", verbose);",
					"    }",
					"",
					"    async addEvent(event, verbose=null) {",
					"        return this.post(\"/events\", event, \"Error when adding a new event: \", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Error while executing POST-request: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Error while executing PATCH-request: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Error while executing GET-request: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Error while executing the query: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const headers = {",
					"            \"Content-Type\": \"application/json\",",
					"            \"X-User-Id\": pm.request.headers.get(\"X-User-Id\") || \"1\",",
					"            \"X-User-Password\": pm.request.headers.get(\"X-User-Password\") || \"WrongPassword!\"",
					"            };",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: headers,",
					"            };",
					"            if(verbose) {",
					"                console.log(\"Sending a request: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"When making a request to the server, an error occurred.\\n\", err,",
					"                             \"\\nTo debug the problem, repeat the same request to your program \" + ",
					"                             \"on the local computer. Query data:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"                    if(verbose) {",
					"                        console.log(\"Request processing result: status code - \", response.code, \", тело: \", response.json());",
					"                    }",
					"                    if (response.stream.length === 0){",
					"                        reject(new Error('Sent an empty reply body'))",
					"                    }else{",
					"                        resolve(response.json());",
					"                    }",
					"                });",
					"                ",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"}",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}'),",
					"            password: pm.variables.replaceIn('2aA'+'{{$randomPassword}}'+'#'),",
					"            aboutMe: pm.variables.replaceIn('{{$randomJobDescriptor}}')",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomLoremWords}}'),",
					"            description: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"            startDateTime: this.getFutureDateTime(),",
					"            endDateTime: this.getFutureDateTime(50), ",
					"            location: pm.variables.replaceIn('{{$randomLoremWords}}')",
					"        }",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"    ",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "default"
		},
		{
			"key": "{{userid}}",
			"value": "1",
			"type": "string",
			"disabled": true
		},
		{
			"key": "userid",
			"value": "5",
			"type": "string"
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "X-User-Id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "X-User-Password",
			"value": "WrongPass",
			"type": "string"
		},
		{
			"key": "foundedUser",
			"value": "",
			"type": "string"
		},
		{
			"key": "useremail",
			"value": ""
		},
		{
			"key": "eventId",
			"value": ""
		}
	]
}